#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\size giant
Programming Assignment 3 Report
\end_layout

\begin_layout Standard
\align center

\size giant
Jaiden Gerig Sec:505
\end_layout

\begin_layout Standard

\size largest
Problem Description:
\end_layout

\begin_layout Standard
This assignment was split into 4 seperate problems.
 Creating and testing a simple doubly linked list of integers.
 creating and testing a basic doubly linked list of integers, creating and
 testing a templated doubly linked list, and finally using the templated
 linked list to create a phone book program to store user data and sort
 it into a vector of 26 linked lists and then implement a search function
 to look up names and UINs.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Purpose of the Assignment:
\end_layout

\begin_layout Standard
The purpose of the assignment was to demonstrate a knowledge of both the
 implementation and the application of linked lists and algorithms that
 involve linked lists.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Data Structures Description:
\end_layout

\begin_layout Standard
By doing this assignment i learned about the Linked List and ListNode data
 structures.
 I implemented them in C++ using pointers to link each list node together
 and creating header and pointer nodes to denote the beginning and end of
 a list.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Algorithm Description:
\end_layout

\begin_layout Standard
I implemented 7 functions over the course of Part 1 of the assignment.
 The insert_before, insert_after, delete_before, and delete_after all run
 in O(1) time as they only rearrange pointers and delete/create items on
 the heap.
 The copy constructor runs in in O(n) time do to the fact that it loops
 over the entire linked list once.
 The assignment operator also runs in O(n) time as it does almost the same
 thing as the copy constructor, both of these functions will also erase
 the linked list being copied to.
 The output operator will run in O(n) time as it loops through all the elements
 of the linked list and prints them.
 For part 2 the less than operator will compare the values of the first
 name, then last name, then UIN, then phone number and the return which
 side is higher alphabetically based on their ASCII value.
 The insert function runs in O(n) time do the the fact that it loops 1 to
 all of the elements of the linked list looking for the correctly sorted
 place to insert the record based on the less than operator.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Program Organization:
\end_layout

\begin_layout Standard
The entirety of the templated doubly linked list and it's operator overloads
 are contained in the TemplateDoublyLinkedList.h header file, all of it's
 member functions are declared in the main class definition and then implemented
 individually below that.
 The Record.h file contains the Record class which is used to store the users
 data, all of it's member functions are declared in the main class definition
 and then implemented individually below that.
 Main.cpp contains the main function for the phone book program and also
 contains functions to search, display, and process the phone book records
 the user feeds in via a text file.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
How to compile + run my program:
\end_layout

\begin_layout Standard
SimpleDoublyLinkedList: (1) type 
\begin_inset Quotes eld
\end_inset

make all
\begin_inset Quotes erd
\end_inset

 to compile (2) type 
\begin_inset Quotes eld
\end_inset

./SimplyLinkedList
\begin_inset Quotes erd
\end_inset

 to run tests
\end_layout

\begin_layout Standard
DoublyLinkedList: (1) type 
\begin_inset Quotes eld
\end_inset

make all
\begin_inset Quotes erd
\end_inset

 to compile (2) type 
\begin_inset Quotes eld
\end_inset

./Main
\begin_inset Quotes erd
\end_inset

 to run tests
\end_layout

\begin_layout Standard
TemplateDoublyLinkedList: (1) type 
\begin_inset Quotes eld
\end_inset

make all
\begin_inset Quotes erd
\end_inset

 to compile (2) type 
\begin_inset Quotes eld
\end_inset

./Main
\begin_inset Quotes erd
\end_inset

 to run tests
\end_layout

\begin_layout Standard
Phone_Book: (1) type 
\begin_inset Quotes eld
\end_inset

make all
\begin_inset Quotes erd
\end_inset

 to compile (2) type 
\begin_inset Quotes eld
\end_inset

./Main
\begin_inset Quotes erd
\end_inset

 to run (3) type 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 to print all the phone book records currently stored (4) type 
\begin_inset Quotes eld
\end_inset

2 
\begin_inset Quotes eld
\end_inset

 then when prompted enter the required information to search (5) type 
\begin_inset Quotes eld
\end_inset

3
\begin_inset Quotes erd
\end_inset

 to exit the program
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Input + Output Specs:
\end_layout

\begin_layout Standard
Input must be given in this format:
\end_layout

\begin_layout Standard
Lastname
\end_layout

\begin_layout Standard
Firstname
\end_layout

\begin_layout Standard
UIN
\end_layout

\begin_layout Standard
Phonenumber
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
The output will be given in this format:
\end_layout

\begin_layout Standard
Name: Lastname, Firstname
\end_layout

\begin_layout Standard
UIN:UIN
\end_layout

\begin_layout Standard
Phone Number: Phonenumber
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Logical Exceptions:
\end_layout

\begin_layout Standard
Crashes when: Input is not formatted correctly from the text file
\end_layout

\begin_layout Standard
Throws exception when: Menu item is not chosen, UIN inputed does not consist
 of 9 digits(sometimes happens when input data isnt formattaed right), The
 input file will not open
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
C++ OO or Generic Programming features:
\end_layout

\begin_layout Standard
This progam uses templates for generic programming to paramaterize the type
 of the linked list allowing for multiple data types to have their own linked
 list.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Tests:
\end_layout

\begin_layout Standard
Valid Cases: input file is formatted correctly, input file has anything
 inbetween each record
\end_layout

\begin_layout Standard
Invalid Cases: if the list is modified without using insert then insert
 will not work correctly, bad input data breaks program
\end_layout

\end_body
\end_document
