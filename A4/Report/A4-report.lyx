#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\size giant
Programming Assignment 4 Report
\end_layout

\begin_layout Standard
\align center

\size giant
Jaiden Gerig Sec:505
\end_layout

\begin_layout Standard

\size largest
Problem Description:
\end_layout

\begin_layout Standard
This assignment was to implement and demontrate the use of a binary search
 tree and study their ability to reduce average search costs for different
 data sets
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Purpose of the Assignment:
\end_layout

\begin_layout Standard
The purpose of the assignment was to demonstrate a knowledge of both the
 implementation and the application of binary search trees and algorithms
 that involve binary search trees.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Data Structures Description:
\end_layout

\begin_layout Standard
By doing this assignment i learned about the Binary search tree and Binary
 node data structures.
 I implemented them in C++ using pointers to link each binary node together
 in a hierarchical nodes starting with a root node.
 This allows for more efficient searching when accessing data due to an
 ideal log(n) height when balanced correctly.
 The nodes in this implementation also keep track of their own search costs,
 which are recalculated at each insertion and deletion by the calcdepth()
 function, which uses inorder traversal to assign each node a depth value.
 Total cost is calculated during printing of the list.
 Average search cost is computed by taking the total cost / the size of
 the tree.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Algorithm Description:
\end_layout

\begin_layout Standard
The main algorithms used in this program were in order traversal to print
 and keep track of the size of the generated tree, another important algorithm
 used in my implementation is the breadth-first alogorithm, which was used
 to print the tree level by level.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Program Organization:
\end_layout

\begin_layout Standard
The declarations for the binary search tree and binary node are stored in
 BinarySearchTree.h, while the implementation for most of their functions
 is stored in BinarySearchTree.cpp, The entirety of the testing and user
 interface is done in the main.cpp file.
 BinarySearchTree is a friend class of BinaryNode and uses it as an integral
 part of it's implementation.
 BinarySearchTree is also responsible for finding and assigning each BinaryNode
 a searchCost value.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
How to compile + run my program:
\end_layout

\begin_layout Standard
(1) type 
\begin_inset Quotes eld
\end_inset

make all
\begin_inset Quotes erd
\end_inset

 to compile (2) type 
\begin_inset Quotes eld
\end_inset

./Main
\begin_inset Quotes erd
\end_inset

 to run (3) type in the location of the file you want to read in from then
 press enter (4) type yes/y to remove a node and reprint, type anything
 else to exit.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Average Search costs:
\end_layout

\begin_layout Standard
Perfect = O(nlog(n)), Individual = O(log(n))
\end_layout

\begin_layout Standard
Linear = O(n^2), Individual = O(n)
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size largest
Experimental Results:
\end_layout

\begin_layout Standard
Located in testruns.txt and A4-Charts+Data.xls
\end_layout

\end_body
\end_document
